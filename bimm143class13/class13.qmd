---
title: "Class 13: RNA Seq pt.1"
author: "Lily Huynh (PID: A16929651)"
date: 2/18/2025
toc: true
format: html
---

Today we will analyze data from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).

## Import countData and colData

There are two data sets I need to import/read

- `countData` the transcript counts per gene (rows) in the different experiments
- `colData` information (a.k.a. metadata) about the columns (i.e. experiments) in `countData`.

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <- read.csv("airway_metadata.csv")
```

We can have a peak at these with `head()`

```{r}
head(counts)
```

```{r}
metadata
```

> Q1. How many genes are in this dataset?

> Ans. There are 38,694 genes in this dataset. 

```{r}
nrow(counts)
```

> Q2. How many `control` cell lines do we have? 

> Ans. There are 4 control cell lines. 

```{r}
table(metadata$dex)
```

```{r}
sum(metadata$dex == "control")
```

## Toy differential gene expression

We can find the average (mean) count values per gene for all "control" experiments and compare it to the mean values for "treated". 

- Extract all "control" columns from the `counts` data 
- Find the mean value for each gene 

```{r}
control.inds <- metadata$dex == "control"
control.counts <- counts[,control.inds]
```

```{r}
dim(control.counts)
```

Now find the row wise mean 

```{r}
control.mean <- rowSums(control.counts)/4
head(control.mean)
```

> Q3. How would you make the above code in either approach more robust? Is there a function that could help here?

> Ans. I would use the `ncol()` function 

```{r}
control.mean <- rowSums(control.counts)/ncol(control.counts)
head(control.mean)
```

> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated.inds <- metadata$dex == "treated"
treated.counts <- counts[, treated.inds]
```

```{r}
treated.mean <- apply(treated.counts, 1, mean)
head(treated.mean)
```

Let's put these two mean values together for easy book-keeping

```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```

> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

Let's have a look - i.e. plot control.mean vs treated.mean

```{r}
plot(meancounts)
```

> Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?

> Ans. I would use geom_point() function. 

```{r}
library(ggplot2)

ggplot(meancounts) + 
  aes(control.mean, treated.mean) + 
  geom_point()
```

> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this? 

> Ans. The log argument to plot(). 

Whenever we see data that is heavily skewed like this, we often log transform it so we can see what is going on more easily. 

```{r}
plot(meancounts, log="xy")
```

We most often work in log2 units as this makes the math easier.
Let's have a play to see this 

```{r}
# treated / control
log2(20/20)
```

```{r}
log2(40/20)
```

```{r}
log2(80/20)
```

```{r}
# treated/control
log2(20/40)
```

We can now add a "log2 fold-change" values to our `meancounts` data set. 

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean / meancounts$control.mean)

head(meancounts)
```

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

> Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

> Ans. The purpose of the arr.ind argument is to get rid of the NaN and infinity values from the table because they aren't considered TRUE values. The unique() function is used to make sure we don't count the rows twice when they have a 0. 

We need to filter out zero count genes - i.e. remove the rows (genes) that have a 0 value in either control or treated means. 

```{r}
to.keep <- rowSums(meancounts[,1:2] == 0) ==0
mycounts2 <- meancounts[to.keep,]
nrow(mycounts2)
```

>Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 

> Ans. There are 250 up regulated genes that have a greater than 2 fc level. 

```{r}
up.inds2 <- mycounts$log2fc > 2
sum(up.inds2)
```

How many genes are "up" regulated at the common log2 fold-change threshold of +2. 

```{r}
up.inds <- meancounts$log2fc>=2
sum(up.inds, na.rm = T)
```

>Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 

> Ans. There are 367 down regulated genes that have a value greater than 2 fc level. 

```{r}
down.inds2 <- mycounts$log2fc < (-2)
sum(down.inds2)
```

How many genes are "down" regulated at the threshold of -2? 

```{r}
down.inds <- meancounts$log2fc <=-2
sum(down.inds, na.rm = T)
```

> Q10. Do you trust these results? Why or why not?

> Ans. I do not trust these results because we didn't calculate the p-value yet. Therefore, we don't know if the differences in the data is signficiant or not. 

## DESeq2 analysis

To do this the right way, we need to consider the significance of the differences not just their magnitude. 

```{r}
#| message: false
library(DESeq2)
```

To use this package, it wants countData and colData in a specific format.

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                              colData = metadata,
                              design = ~dex)
```

```{r}
dds2 <- DESeq(dds)
```

Extract my results

```{r}
res <- results(dds2)
head(res)
```

Plot of fold-change vs P-value (adjusted for multiple testing)

```{r}
plot(res$log2FoldChange, res$padj)
```

Take the log of the P-value

```{r}
plot(res$log2FoldChange, log(res$padj))
```

```{r}
log(0.01)
```

```{r}
log(0.0000000001)
```

We can just flip that y-axis by putting a minus sign on it 

```{r}
plot(res$log2FoldChange, -log(res$padj),
     xlab = "Log2 Fold-change",
     ylab = "-log(P-value)")
```

Let's save our work to date

```{r}
write.csv(res, file = "myresults.csv")
```

To finish off, let's make a nicer volcano plot 

- Add the log2 threshold lines at +2/-2
- Add P-value threshold lines at 0.05
- Add color to highlight the subset of genes that meet both of the above thresholds. 

Make it with ggplot please...

```{r}
mycols <- rep("gray", nrow(res))
mycols[res$log2FoldChange>=2] <- "blue"
mycols[res$log2FoldChange <= -2] <- "blue"
mycols[res$padj > 0.05] <- "gray"
```

```{r}
library(ggplot2)
ggplot(res) + 
  aes(log2FoldChange, -log(padj)) +
  geom_point(col=mycols) + 
  geom_vline(xintercept= c(-2,2), col="red") + 
  geom_hline(yintercept=0.05, col="blue")
```

## PCA

```{r}
library(DESeq2)
vsd <- vst(dds, blind = FALSE)
plotPCA(vsd, intgroup = c("dex"))
```

```{r}
pcaData <- plotPCA(vsd, intgroup=c("dex"), returnData=TRUE)
head(pcaData)
```

```{r}
# Calculate percent variance per PC for the plot axis labels
percentVar <- round(100 * attr(pcaData, "percentVar"))
```

```{r}
ggplot(pcaData) +
  aes(x = PC1, y = PC2, color = dex) +
  geom_point(size =3) +
  xlab(paste0("PC1: ", percentVar[1], "% variance")) +
  ylab(paste0("PC2: ", percentVar[2], "% variance")) +
  coord_fixed() +
  theme_bw()
```

## Add gene annotation data 

Now the question is what are the blue points in the above volcano plot - i.e. what are the genes most influenced by drug treatment here? 

```{r}
head(res)
```

We will use some BioConductor packages to "map" the ENSEMBLE ids to more useful gene SYMBOL names/ids.

We ccan install these packages with `BiocManager::install("AnnotationDbi")`

```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)
```

What database identifiers can I translate between here:

```{r}
columns(org.Hs.eg.db)
```

We can now use the `mapIDs()` function to translate/map between these different identifier formats.

Let's add SYMBOL, GENENAME, ENTREZID

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys = rownames(res),
                     keytype = "ENSEMBL",
                     column = "SYMBOL")

res$genename <- mapIds(org.Hs.eg.db,
                     keys = rownames(res),
                     keytype = "ENSEMBL",
                     column = "GENENAME")

res$entrez <- mapIds(org.Hs.eg.db,
                     keys = rownames(res),
                     keytype = "ENSEMBL",
                     column = "ENTREZID")

head(res)
```

## Pathway analysis 

Now I know the gene names and their IDs in different databases, I want to know what type of biology they are involved in... 

This is the job of "pathway analysis" (a.k.a. "gene set enrichment")

There are tons of different BioConductor packages for pathway analysis, here we use just one of them called **gage**, and **pathview**. I will install these packages with `BiocManager::install(c("gage", "pathview", "gageData"))`

```{r}
library(gage)
library(gageData)
library(pathview)
```

Load up the KEGG genesets

```{r}
data(kegg.sets.hs)
```

```{r}
head(kegg.sets.hs, 2)
```

We will use these KEGG gene sets (a.k.a. pathways) and our `res` results to see what overlaps. To do this we will use the `gage()` function. 

For input `gage()` wants just a vector of importance - in our case FoldChange values. 

```{r}
foldchanges <- res$log2FoldChange
```

Vectors in R can have "names" that are useful for bookkeeping so we know what a given valube corresponds to, e.g.:

```{r}
x <- c(10,100,20)
names(x) <- (c("barry", "alice", "chandra"))
x
```

Let's put names in our `foldchanges` vector - here we will use `res$entrez`

```{r}
names(foldchanges) <- res$entrez
head(foldchanges)
```

Now we can run "pathway analysis"

```{r}
# Get the results
keggres = gage(foldchanges, gsets = kegg.sets.hs)
```

```{r}
head(keggres$less)
```

We can get a pathway image file with our gene sets highlighted via the `pathwayview()` function. 

```{r}
pathview(foldchanges, pathway.id = "hsa05310")
```

Insert this figure in my report

![](hsa05310.pathview.png)






































